// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: auth_user.sql

package sqlc_queries

import (
	"context"
)

const createAuthUser = `-- name: CreateAuthUser :one
INSERT INTO auth_user (email, "password", first_name, last_name, username, is_staff, is_superuser)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined
`

type CreateAuthUserParams struct {
	Email       string
	Password    string
	FirstName   string
	LastName    string
	Username    string
	IsStaff     bool
	IsSuperuser bool
}

func (q *Queries) CreateAuthUser(ctx context.Context, arg CreateAuthUserParams) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, createAuthUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.IsStaff,
		arg.IsSuperuser,
	)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsStaff,
		&i.IsActive,
		&i.DateJoined,
	)
	return i, err
}

const deleteAuthUser = `-- name: DeleteAuthUser :exec
DELETE FROM auth_user WHERE email = $1
`

func (q *Queries) DeleteAuthUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthUser, email)
	return err
}

const getAllAuthUsers = `-- name: GetAllAuthUsers :many
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user ORDER BY id
`

func (q *Queries) GetAllAuthUsers(ctx context.Context) ([]AuthUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllAuthUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthUser
	for rows.Next() {
		var i AuthUser
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.LastLogin,
			&i.IsSuperuser,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsStaff,
			&i.IsActive,
			&i.DateJoined,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthUserByEmail = `-- name: GetAuthUserByEmail :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user WHERE email = $1
`

func (q *Queries) GetAuthUserByEmail(ctx context.Context, email string) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, getAuthUserByEmail, email)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsStaff,
		&i.IsActive,
		&i.DateJoined,
	)
	return i, err
}

const getAuthUserByID = `-- name: GetAuthUserByID :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user WHERE id = $1
`

func (q *Queries) GetAuthUserByID(ctx context.Context, id int32) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, getAuthUserByID, id)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsStaff,
		&i.IsActive,
		&i.DateJoined,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsStaff,
		&i.IsActive,
		&i.DateJoined,
	)
	return i, err
}

const listAuthUsers = `-- name: ListAuthUsers :many
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user ORDER BY id LIMIT $1 OFFSET $2
`

type ListAuthUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAuthUsers(ctx context.Context, arg ListAuthUsersParams) ([]AuthUser, error) {
	rows, err := q.db.QueryContext(ctx, listAuthUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthUser
	for rows.Next() {
		var i AuthUser
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.LastLogin,
			&i.IsSuperuser,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsStaff,
			&i.IsActive,
			&i.DateJoined,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthUser = `-- name: UpdateAuthUser :one
UPDATE auth_user SET "password" = $2, is_superuser = $3, username = $4, first_name = $5, last_name = $6, email = $7, last_login = now() 
WHERE id = $1
RETURNING id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined
`

type UpdateAuthUserParams struct {
	ID          int32
	Password    string
	IsSuperuser bool
	Username    string
	FirstName   string
	LastName    string
	Email       string
}

func (q *Queries) UpdateAuthUser(ctx context.Context, arg UpdateAuthUserParams) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, updateAuthUser,
		arg.ID,
		arg.Password,
		arg.IsSuperuser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsStaff,
		&i.IsActive,
		&i.DateJoined,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE auth_user SET "password" = $2 WHERE email = $1
`

type UpdateUserPasswordParams struct {
	Email    string
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Email, arg.Password)
	return err
}
